version: '3.8'

services:
  mcp-server-tcp:
    build:
      context: ./agent_a
    volumes:
      - agent_a_web_out:/app/out

  agent_a_web:
    build:
      context: ./agent_a_web
      additional_contexts:
        agent_a: ./agent_a
    ports:
      - "8090:8000"
    volumes:
      - agent_a_web_out:/app/out
    depends_on:
      - rabbitmq

  cyberner-api:
    build:
      context: ./agent_b
      dockerfile: Dockerfile
    container_name: cyberner-api
    environment:
      - QDRANT_URL=http://qdrant:6333
      - QDRANT_COLLECTION=heva_docs
    ports: [ "8100:8000" ]
    command: >
      sh -lc '
        QURL=$${QDRANT_URL:-http://qdrant:6333};
        echo "Waiting for $$QURL/readyz";
        for i in $$(seq 1 120); do
          if curl -fsS "$$QURL/readyz" >/dev/null; then
            echo "Qdrant ready";
            exec /opt/venv/bin/uvicorn 3_search_api_rich:app --host 0.0.0.0 --port 8000;
          fi
          echo "[ $$i ] waiting...";
          sleep 5;
        done;
        echo "Qdrant not ready in time";
        exit 1
      '
    restart: unless-stopped

  agent_b_web:
    build:
      context: ./agent_b_web
      additional_contexts:
        agent_b: ./agent_b
    ports:
      - "8200:8200"
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=root
      - RABBITMQ_PASS=toor
      - RABBITMQ_QUEUE=data.ingest.done
      - OUT_DIR=/app/out
      - PENDING_DIR=/app/pending
      - QDRANT_URL=http://qdrant:6333
      - QDRANT_COLLECTION=heva_docs
      - MAX_WORKERS=4
      - API_PORT=8200
    volumes:
      - agent_a_web_out:/app/out
      - agent_b_pending:/app/pending
    depends_on:
      - rabbitmq
      - qdrant

  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage

  chromadb:
    image: chromadb/chroma:latest
    container_name: chromadb
    ports: !override
      - "8001:8000"

  autonomous-council-api:
    build:
      context: ./agent_c
      dockerfile: Dockerfile
    ports: !override
      - "8080:8000"
    environment:
      - MODEL_PATH=/app/models/Llama-3.2-3B-Instruct
      - CHROMA_HOST=chromadb
      - CHROMA_PORT=8000
      - EXPERTISE_DB_NAME=expertise_db
      - INCIDENT_DB_NAME=incident_db
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - POSTGRES_DB=${POSTGRES_DB:-autonomous_council}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
    volumes:
      - agent_a_web_out:/app/out

  postgres:
    image: postgres:15
    ports: !override
      - "5432:5432"

  backend:
    build:
      context: ./agent_d/backend
      dockerfile: Dockerfile
    ports: !override
      - "8000:8000"
    volumes:
      - agent_a_web_out:/app/out

  frontend-react:
    build:
      context: ./agent_d/frontend-react
      dockerfile: Dockerfile
    ports: !override
      - "3000:3000"

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: root
      RABBITMQ_DEFAULT_PASS: toor
      RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: -rabbitmq_management load_definitions "/etc/rabbitmq/definitions.json"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./rabbitmq-definitions.json:/etc/rabbitmq/definitions.json:ro

volumes:
  rabbitmq_data:
  agent_a_web_out:
  agent_b_pending:
  qdrant_data:
